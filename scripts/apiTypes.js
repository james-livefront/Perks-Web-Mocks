// Node script to generate TypeScript types from the Online Care API spec

// In Node, using TypeScript and ES6 imports is complicated.
// So, just for this file, we are using plain JS and require statements.
/* eslint-disable @typescript-eslint/no-var-requires */
const fs = require('fs')
const { default: dtsGenerator, parseSchema } = require('dtsgenerator')
const YAML = require('yaml')

const inputFile = './config/openapi.yml'
const outputPath = './src/api-types.d.ts'

// Convert the yaml spec to a JS object
const spec = YAML.parse(fs.readFileSync(inputFile, 'UTF-8'))

// Generate types
dtsGenerator({
  contents: [parseSchema(spec)],
  config: {
    plugins: {
      '@dtsgenerator/replace-namespace': {
        map: [
          {
            // Rename root namespace 'OCApi' for clarity
            from: ['Components'],
            to: ['OCApi'],
          },
        ],
      },
    },
  },
}).then(result => {
  // The `export` prefix makes the top-level declaration import-able as a module
  const fileContent = `
    /*
    *  This file is generated by apiTypes.js
    *  Do not edit manually!
    */
    /* eslint-disable @typescript-eslint/naming-convention -- Some API fields are temporarily in \`snake_case\`. (TODO: OPW-2996) */
    /* eslint-disable @typescript-eslint/no-empty-interface -- Some parts of the spec allow \`any\` content. */
    /* eslint-disable @typescript-eslint/no-explicit-any -- Some parts of the spec allow \`any\` content. */
    /* eslint-disable @typescript-eslint/no-namespace -- There is no getting around generating namespaces with this tool. */\n
    export ${result}`
  fs.writeFileSync(outputPath, fileContent)
})
